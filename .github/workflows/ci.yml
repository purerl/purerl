name: "CI"

on:
  push:
    branches: [ "master", "ci" ]
  pull_request:
    branches: [ "master" ]
  release:
    types: [ "published" ]

defaults:
  run:
    shell: "bash"

env:
  CI_RELEASE: "${{ github.event_name == 'release' }}"
  STACK_VERSION: "2.9.3"

jobs:
  build:
    strategy:
      fail-fast: false # do not cancel builds for other OSes if one fails
      matrix:
        include:
        - os: ["ubuntu-latest"]
          image: haskell:9.2.5@sha256:2597b0e2458165a6635906204f7fac43c22e7d2a46aca1235a811194bb6cd419
        - os: "macos-13"  # x64
        - os: "macos-15"
        - os: "windows-2025"

    runs-on: "${{ matrix.os }}"
    container: "${{ matrix.image }}"

    steps:
      - # We need a proper Git repository, but the checkout step will unpack a tarball instead of doing a clone
        # if the Git version is less than 2.18.
        name: "(Linux only) Install a newer version of Git"
        if: "${{ runner.os == 'Linux' }}"
        run: |
          . /etc/os-release
          echo deb http://deb.debian.org/debian "$VERSION_CODENAME"-backports main >> /etc/apt/sources.list
          # buster is old
          sed -i 's/deb.debian.org/archive.debian.org/g' /etc/apt/sources.list
          apt-get update && apt-get install -y git/"$VERSION_CODENAME"-backports

      - uses: "actions/checkout@v2"

      - uses: "actions/setup-node@v1"
        with:
          node-version: "22"

      - id: "haskell"
        name: "(Non-Linux only) Install Haskell"
        if: "${{ runner.os != 'Linux' }}"
        uses: "haskell/actions/setup@v1"
        with:
          enable-stack: true
          stack-version: "${{ env.STACK_VERSION }}"
          stack-no-global: true

      - name: "(Linux only) Check Stack version and fix working directory ownership"
        if: "${{ runner.os == 'Linux' }}"
        run: |
          [ "$(stack --numeric-version)" = "$STACK_VERSION" ]
          chown root:root .

      - uses: "actions/cache@v4"
        with:
          path: |
            /root/.stack
            ${{ steps.haskell.outputs.stack-root }}
          key: "${{ runner.os }}-MdyPsf-${{ hashFiles('stack.yaml') }}"

      - name: "(Windows only) Configure Stack to store its programs in STACK_ROOT"
        # This ensures that the local GHC and MSYS binaries that Stack installs
        # are included in the cache. (This behavior is the default on
        # non-Windows OSes.)
        if: "${{ runner.os == 'Windows' }}"
        run: |
          mkdir -p "$STACK_ROOT"
          echo "local-programs-path: $STACK_ROOT/programs" > $STACK_ROOT/config.yaml
      
      - name: "(Release only) Check release matches tag"
        if: "${{ env.CI_RELEASE == 'true' }}"
        run: |
          actual_version=$(grep version: package.yaml  | awk '{ gsub(/"/, "", $2); print $2 }')
          [ "v${actual_version}" = "${{ github.event.release.tag_name }}" ]
          echo "Version is $actual_version, tag is ${{ github.event.release.tag_name }}"

      # - run: "ci/run-hlint.sh --git"
      #   env:
      #     VERSION: "2.2.11"

      - run: "ci/fix-home.sh ci/build.sh"


      - name: "(Release only) Create bundle"
        if: "${{ env.CI_RELEASE == 'true' }}"
        run: |
          os_name="${{ runner.os }}"
          case "$os_name" in
            Linux)
              bundle_os=linux64;;
            macOS)
              bundle_os=macos;;
            Windows)
              bundle_os=win64;;
            *)
              echo "Unknown OS name: $os_name"
              exit 1;;
          esac
          cd sdist-test
          ../ci/fix-home.sh bundle/build.sh "$bundle_os"

      - name: "(Release only) Publish bundle"
        if: "${{ env.CI_RELEASE == 'true' }}"
        # Astonishingly, GitHub doesn't currently maintain a first-party action
        # for uploading assets to GitHub releases! This is the best third-party
        # one I could find, but as this step handles a token, it seems
        # particularly important that we lock it down to a specific audited
        # version, instead of a tag like the other steps.
        uses: "AButler/upload-release-assets@ec6d3263266dc57eb6645b5f75e827987f7c217d"
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          files: "sdist-test/bundle/*.{tar.gz,sha}"